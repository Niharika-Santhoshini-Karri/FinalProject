/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.Admin;

import DBUTIL.DBUTIL;
import MODEL.Validations;
import UI.LoginScreen;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aish
 */
public class AdminPC extends javax.swing.JFrame {

    /**
     * Creates new form AdminPC
     */
    Random rand = new Random();
    Validations validations;
    Vector originalTableModel;
    ResultSet resultSet = null;
    DBUTIL dbconn= new DBUTIL();
    public AdminPC() {
        initComponents();
        populateTable();
        validations= new Validations();
        originalTableModel = (Vector) ((DefaultTableModel) tblPlasma.getModel()).getDataVector().clone();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblZipcode = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlasma = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        lblSelectOrgType = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        txtZipcode = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        txtid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtpcname = new javax.swing.JTextField();
        lbSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        valName = new javax.swing.JLabel();
        valAddress = new javax.swing.JLabel();
        valContact = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtaddress1 = new javax.swing.JTextField();
        txtmobile = new javax.swing.JTextField();
        valZip = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        btnBack.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(570, 30, 100, 27);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel1.setText("NAME");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 370, 70, 21);

        lblZipcode.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        lblZipcode.setText("ZIP CODE");
        getContentPane().add(lblZipcode);
        lblZipcode.setBounds(40, 490, 90, 30);

        tblPlasma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Mobile", "Zipcode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPlasma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPlasmaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPlasma);
        if (tblPlasma.getColumnModel().getColumnCount() > 0) {
            tblPlasma.getColumnModel().getColumn(4).setMinWidth(0);
            tblPlasma.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblPlasma.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 140, 680, 130);

        btnAdd.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(130, 550, 87, 27);

        lblSelectOrgType.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        lblSelectOrgType.setText("ID");
        getContentPane().add(lblSelectOrgType);
        lblSelectOrgType.setBounds(80, 330, 60, 21);

        btnDelete.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(400, 280, 100, 27);

        lblTitle.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        lblTitle.setText("PLASMA CENTER");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(80, -2, 330, 60);

        txtZipcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtZipcodeKeyReleased(evt);
            }
        });
        getContentPane().add(txtZipcode);
        txtZipcode.setBounds(180, 490, 100, 31);

        btnUpdate.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(280, 280, 100, 27);

        txtid.setEditable(false);
        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });
        getContentPane().add(txtid);
        txtid.setBounds(180, 320, 100, 31);

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel2.setText("ADDRESS");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 410, 80, 21);

        txtpcname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpcnameKeyReleased(evt);
            }
        });
        getContentPane().add(txtpcname);
        txtpcname.setBounds(180, 370, 100, 40);

        lbSearch.setFont(new java.awt.Font("American Typewriter", 1, 14)); // NOI18N
        lbSearch.setText("SEARCH");
        getContentPane().add(lbSearch);
        lbSearch.setBounds(70, 80, 90, 30);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(150, 80, 430, 30);

        valName.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valName);
        valName.setBounds(310, 370, 150, 20);

        valAddress.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valAddress);
        valAddress.setBounds(310, 410, 150, 20);

        valContact.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valContact);
        valContact.setBounds(290, 450, 130, 20);

        jLabel6.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel6.setText("MOBILE");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(40, 450, 90, 30);

        txtaddress1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtaddress1KeyReleased(evt);
            }
        });
        getContentPane().add(txtaddress1);
        txtaddress1.setBounds(180, 410, 100, 40);

        txtmobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmobileKeyReleased(evt);
            }
        });
        getContentPane().add(txtmobile);
        txtmobile.setBounds(180, 450, 100, 31);

        valZip.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valZip);
        valZip.setBounds(300, 490, 130, 20);

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/Admin/ADMIN BG.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        jLabel3.setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 800, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
     this.hide();
     AdminWorkArea frame = new AdminWorkArea();
     frame.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       var valid = true;
       
        if (!this.validations.ValidateName(txtpcname.getText()) ) {
            valName.setText("Plasma  Name is Invalid");
            valid = false;
      
        }
        
        if (!this.validations.ValidateAddress(txtZipcode.getText()) ) {
            valAddress.setText("Address is required");
            valid = false;
        }
        
       
        if (!this.validations.ValidatePhoneNumber(txtmobile.getText()) ) {
            valContact.setText("Phone Number is Invalid");
            valid = false;
        }
        //int pc_id = Integer.valueOf(txtid.getText());
        int pc_id = rand.nextInt(1,100); 
       String pc_name = txtpcname.getText();
       //int hos_id = Integer.valueOf(txthos_id.getText());
       String address = txtaddress1.getText();
      
       String mobile = txtmobile.getText();
       int  zipcode = Integer.valueOf(txtZipcode.getText());
       
        Connection conn = dbconn.getConnection();
        //do validation here.
        
        //check if the id already exists and a valid hospital id laready exists
                String INSERTPCSQL = "insert into plasmaC(pc_id,pc_name,address,mobile,zipcode) values (?,?,?,?,?) ";

        PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(INSERTPCSQL);
       
             
            stmt.setInt(1,pc_id); 
            stmt.setString(2,pc_name);
            //stmt.setInt(3,hos_id);
            stmt.setString(3,address);
            stmt.setString(4,mobile);
            stmt.setInt(5,zipcode);
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminPC.class.getName()).log(Level.SEVERE, null, ex);
        }

           JOptionPane.showMessageDialog(this,"New Plasma Center Added");

       populateTable(); 
   setTextNull();
   setValidationNull();
  //stop
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         Connection conn = dbconn.getConnection();
         int SelectedRowIndex=tblPlasma.getSelectedRow();
        if(SelectedRowIndex<0)
        {
         JOptionPane.showMessageDialog(this, "Please select a row to delete");
            
        return;
        }
        DefaultTableModel model =(DefaultTableModel) tblPlasma.getModel();
         int pc_id=(int) model.getValueAt(SelectedRowIndex, 0);
       
         conn = dbconn.getConnection();
          String selectSql = "Delete from plasmaC where pc_id=?";
     PreparedStatement stmt;
      try {
             
             stmt=conn.prepareStatement(selectSql);
             
                 stmt.setInt(1, pc_id);
                                   
              stmt.executeUpdate();
          conn.close();
          } catch (SQLException ex) {
              Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
          }
    
         
        JOptionPane.showMessageDialog(this, "Plasma Center Deleted");
        populateTable();
        setTextNull();
    

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
         var valid = true;
       
        if (!this.validations.ValidateName(txtpcname.getText()) ) {
            valName.setText("Plasma  Name is Invalid");
            valid = false;
      
        }
        
        if (!this.validations.ValidateAddress(txtZipcode.getText()) ) {
            valZip.setText("Address is required");
            valid = false;
        }
        
       
        if (!this.validations.ValidatePhoneNumber(txtmobile.getText()) ) {
            valContact.setText("Phone Number is Invalid");
            valid = false;
        }
        int pc_id = Integer.valueOf(txtid.getText());
       String pc_name = txtpcname.getText();
       //int hos_id = Integer.valueOf(txthos_id.getText());
       String address = txtaddress1.getText();
      
       String mobile = txtmobile.getText();
       int zipcode = Integer.valueOf(txtZipcode.getText()); 
       
    
       
            // validate the text from text boxes 
       //DBUTIL dbconn= new DBUTIL();
        Connection conn = dbconn.getConnection();
        //do validation here.
        //check if the id already exists
                String SELECTHOSSQL = "update plasmaC set pc_name=? ,address=?,mobile=?, zipcode=? where pc_id=? ";
                PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(SELECTHOSSQL);
       
             
            stmt.setString(1,pc_name); 
            stmt.setString(2,address);
               stmt.setString(3,mobile);
           stmt.setInt(4,zipcode);
            
         
            stmt.setInt(5,pc_id);
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
        int SelectedRowIndex=tblPlasma.getSelectedRow();
       System.out.println("SelectedRowIndex "+SelectedRowIndex);
                  if(SelectedRowIndex<0)
        {
         JOptionPane.showMessageDialog(this, "Please select a row to Update");
            
        return;
        }
        // to display in the text boxes          
        DefaultTableModel tblModel = (DefaultTableModel) tblPlasma.getModel();
              
       tblModel.setValueAt(pc_id,tblPlasma.getSelectedRow(), 0);
       tblModel.setValueAt(pc_name,tblPlasma.getSelectedRow(), 1);
      // tblModel.setValueAt(hos_id,tblPlasma.getSelectedRow(), 2);
       tblModel.setValueAt(address,tblPlasma.getSelectedRow(), 2);
       tblModel.setValueAt(mobile,tblPlasma.getSelectedRow(), 3);
       
        

  JOptionPane.showMessageDialog(this,"Plasma Center Details updated!!");

       populateTable(); 
   
  //stop
       setTextNull();
       setValidationNull();
        
        

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void tblPlasmaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPlasmaMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) tblPlasma.getModel();

        // set data to textfield when raw is selected

        String id = tblModel.getValueAt(tblPlasma.getSelectedRow(),0).toString();
        String pc_name = tblModel.getValueAt(tblPlasma.getSelectedRow(),1).toString();
        //String hos_id = tblModel.getValueAt(tblPlasma.getSelectedRow(),2).toString();
        String address = tblModel.getValueAt(tblPlasma.getSelectedRow(),2).toString();
        String mobile = tblModel.getValueAt(tblPlasma.getSelectedRow(),3).toString();
        String zipcode = tblModel.getValueAt(tblPlasma.getSelectedRow(),4).toString();
        

        txtid.setText(String.valueOf(id));
        txtpcname.setText(pc_name);
        //txthos_id.setText(hos_id);
        txtaddress1.setText(address);
        txtmobile.setText(mobile);
        txtZipcode.setText(String.valueOf(zipcode));
        setValidationNull();
    }//GEN-LAST:event_tblPlasmaMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblPlasma.getModel();

        model.setRowCount(0);
        for (Object rows : originalTableModel) {
            Vector rowVector = (Vector) rows;
            for (Object column : rowVector) {
                if (column.toString().toLowerCase().contains(txtSearch.getText())) {
                    //content found so adding to table
                    model.addRow(rowVector);
                    break;
                }
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtpcnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpcnameKeyReleased
        // TODO add your handling code here:
        if (!this.validations.ValidateName(txtpcname.getText()) ) {
            valName.setText("Plasma Center Name is required");
        }
        else {
            valName.setText(null);
        }
    }//GEN-LAST:event_txtpcnameKeyReleased

    private void txtZipcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtZipcodeKeyReleased
        // TODO add your handling code here:
        if (!this.validations.ValidateZip(txtZipcode.getText()) ) {
            valZip.setText("Zip Code is required");
        }
        else {
            valZip.setText(null);
        }
    }//GEN-LAST:event_txtZipcodeKeyReleased

    private void txtaddress1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtaddress1KeyReleased
        // TODO add your handling code here:
        if (!this.validations.ValidateAddress(txtaddress1.getText()) ) {
            valAddress.setText("Address is required");
        }
        else {
            valAddress.setText(null);
        }
    }//GEN-LAST:event_txtaddress1KeyReleased

    private void txtmobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmobileKeyReleased
        // TODO add your handling code here:
         if (!this.validations.ValidatePhoneNumber(txtmobile.getText()) ) {
            valContact.setText(" Contact is invalid");
        }
        else {
            valContact.setText(null);
        }
    }//GEN-LAST:event_txtmobileKeyReleased

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lblSelectOrgType;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblZipcode;
    private javax.swing.JTable tblPlasma;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtZipcode;
    private javax.swing.JTextField txtaddress1;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtmobile;
    private javax.swing.JTextField txtpcname;
    private javax.swing.JLabel valAddress;
    private javax.swing.JLabel valContact;
    private javax.swing.JLabel valName;
    private javax.swing.JLabel valZip;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPlasma.getModel();
         Connection conn = dbconn.getConnection();
        model.setRowCount(0);
        
         
                  String selectSql = "SELECT * from plasmaC";

      Statement stmt;
       try {
            stmt = conn.createStatement();
       
            resultSet = stmt.executeQuery(selectSql);

             while (resultSet.next()) {
            
            Object[] row = new Object[5];
            row[0]=resultSet.getInt(1);
            row[1] = resultSet.getString(2);
            row[2]=resultSet.getString(3);
            row[3]=resultSet.getString(4);  
            row[4]=resultSet.getInt(5);
            
            model.addRow(row);
             }
             
            
             conn.close();
             
       }
       catch (SQLException ex) {
            Logger.getLogger(LoginScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void setTextNull() {
    txtid.setText(null);
        txtpcname.setText(null);
         txtZipcode.setText(null);
         //txthos_id.setText(null);
          txtmobile.setText(null);
          txtaddress1.setText(null);
    }
    private void setValidationNull() {
        valName.setText(null);
         valAddress.setText(null);
        valContact.setText(null);
       
    }
}
