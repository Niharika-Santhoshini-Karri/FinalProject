/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.Hospital;


import DBUTIL.DBUTIL;
import MODEL.HOSPITAL;
import UI.Admin.AdminHospital;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.Vector;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 91918
 */
public class RequestToPlasmaCenter extends javax.swing.JFrame {

    /**
     * Creates new form RequestToPlasmaCenter
     */
    DBUTIL dbconn= new DBUTIL();
    ResultSet resultSet1, resultSet2 = null;
    public static int myhos_id = HOSPITAL.getHos_id();
  

    Vector originalTableModel;

    public RequestToPlasmaCenter() {
        initComponents();
        System.out.println("plasma req hos_id="+myhos_id);
        populateCombox(); 
        originalTableModel = (Vector) ((DefaultTableModel) tblHPCRequest.getModel()).getDataVector().clone();
        //populateTable(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHPCRequest = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        comboxPatientID = new javax.swing.JComboBox<>();
        comboxStatus = new javax.swing.JComboBox<>();
        comboxBloodGroup = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        lbSearch = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("REQUEST TO PLASMA CENTER");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(213, 49, 310, 55);

        tblHPCRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Req ID", "Blood Group", "Patient ID", "Quantity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHPCRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHPCRequestMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHPCRequest);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 190, 580, 133);

        jLabel3.setText("Blood Group");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(220, 410, 74, 17);

        jLabel4.setText("Patient ID");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(240, 470, 56, 17);

        jLabel5.setText("Quantity");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(250, 520, 49, 17);

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        getContentPane().add(txtQuantity);
        txtQuantity.setBounds(340, 510, 199, 23);

        jLabel6.setText("Status");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(250, 560, 37, 17);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(310, 590, 72, 23);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(370, 340, 73, 23);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(480, 340, 72, 23);

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(80, 32, 72, 23);

        comboxPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxPatientIDActionPerformed(evt);
            }
        });
        getContentPane().add(comboxPatientID);
        comboxPatientID.setBounds(370, 460, 72, 23);

        comboxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Requested", "Recieved" }));
        getContentPane().add(comboxStatus);
        comboxStatus.setBounds(340, 550, 99, 23);

        comboxBloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "O+", "O-", "AB+", "AB-", "A+", "A-", "B+", "B-" }));
        comboxBloodGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxBloodGroupActionPerformed(evt);
            }
        });
        getContentPane().add(comboxBloodGroup);
        comboxBloodGroup.setBounds(370, 410, 72, 23);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(180, 130, 430, 30);

        lbSearch.setFont(new java.awt.Font("American Typewriter", 1, 14)); // NOI18N
        lbSearch.setText("SEARCH");
        getContentPane().add(lbSearch);
        lbSearch.setBounds(100, 130, 90, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
       
        //int patient_id =Integer.valueOf((String) comboxBloodGroup.getSelectedItem());
        
        String strPat_id = (String) comboxPatientID.getSelectedItem();
        int pat_id = Integer.valueOf(strPat_id);
        
         
        
        int quantity = Integer.parseInt(txtQuantity.getText());
        String status = (String)comboxStatus.getSelectedItem();
        // DO SOME VALIDATIONS HERE and if it doesnt match, return. 
        // code for request ID to be autogenerated. 
        
        String Blood_group = (String) comboxBloodGroup.getSelectedItem();
        
        String addReq = "insert into HPCRequest(request_id, pat_id,qty, status, blood_group) values "
                + "(?,?,?,?,?)"; 
        Connection conn = dbconn.getConnection();
        PreparedStatement stmt1 ; 
        try
        {
            stmt1 = conn.prepareStatement(addReq);
            int req_id = rand.nextInt(100); 
            stmt1. setInt(1,req_id); // this is now set to 2, later change to random number of req id
            stmt1. setInt(2,pat_id); 
            stmt1.setInt(3,quantity);
            stmt1.setString(4,status);
            stmt1.setString(5,Blood_group);
            stmt1.executeQuery();
            
            }
        catch (SQLException ex)
        {
            Logger.getLogger(RequestToPlasmaCenter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    this.hide();
        HospitalWorkArea frame = new HospitalWorkArea();
        frame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
     
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblHPCRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHPCRequestMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) tblHPCRequest.getModel();
        String Req_id = tblModel.getValueAt(tblHPCRequest.getSelectedRow(),0).toString();
        String Blood_group = tblModel.getValueAt(tblHPCRequest.getSelectedRow(),0).toString();
        String patient_id = tblModel.getValueAt(tblHPCRequest.getSelectedRow(),0).toString();
        String quantity = tblModel.getValueAt(tblHPCRequest.getSelectedRow(),0).toString();
        String Status = tblModel.getValueAt(tblHPCRequest.getSelectedRow(),0).toString();
        
        //txtRequestID.setText(Req_id); 
        //txtPatientID.setText(patient_id); 
        txtQuantity.setText(quantity); 
        
    }//GEN-LAST:event_tblHPCRequestMouseClicked

    private void comboxPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxPatientIDActionPerformed

    private void comboxBloodGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxBloodGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxBloodGroupActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblHPCRequest.getModel();

        model.setRowCount(0);
        for (Object rows : originalTableModel) {
            Vector rowVector = (Vector) rows;
            for (Object column : rowVector) {
                if (column.toString().toLowerCase().contains(txtSearch.getText())) {
                    //content found so adding to table
                    model.addRow(rowVector);
                    break;
                }
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequestToPlasmaCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequestToPlasmaCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequestToPlasmaCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequestToPlasmaCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RequestToPlasmaCenter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboxBloodGroup;
    private javax.swing.JComboBox<String> comboxPatientID;
    private javax.swing.JComboBox<String> comboxStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JTable tblHPCRequest;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
    }

    private void populateCombox() {
        Connection conn = dbconn.getConnection();
        String SELECTSQL1 = "select pat_id from patients "
                + "join doctors on patients.doc_id = doctors.doc_id where hos_id =? ";
        
        PreparedStatement stmt1; 
        try
        {
            stmt1 = conn.prepareStatement(SELECTSQL1);
            stmt1.setInt(1,myhos_id); // later set this to hos_id
            
            resultSet1 = stmt1.executeQuery();
                    
            while(resultSet1.next())
            {
                comboxPatientID.addItem(resultSet1.getString(1));
            }
            
          }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
}
