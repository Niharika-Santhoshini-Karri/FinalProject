/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.PlasmaCenter;

import DBUTIL.DBUTIL;
import MODEL.Validations;
import UI.Admin.AdminHospital;
import UI.LoginScreen;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import MODEL.PlasmaCenter; 
import java.text.SimpleDateFormat;
import java.util.Random;
/**
 *
 * @author rishikagurram
 */

public class PCStockk extends javax.swing.JFrame {

    /**
     * Creates new form PCStock
     */
    Random rand = new Random(); 
    ResultSet resultSet, resultSetx = null;
    DBUTIL dbconn= new DBUTIL();
    Vector originalTableModel;
    Validations validations;
    public static int thispc_id = PlasmaCenter.getPc_id(); 
    public PCStockk() {
        initComponents();
        populateTable();
        updateComboxDonor(); 
   originalTableModel = (Vector) ((DefaultTableModel) tblStock.getModel()).getDataVector().clone();
    validations = new Validations();
    }
    
    private void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel) tblStock.getModel();
         Connection conn = dbconn.getConnection();
        model.setRowCount(0);
        
         
    String selectSql = "select s.stock_id, d.vdonor_id, d.blood_group, s.quantity, s.date_donation from all_stock s join vdonor d on s.vdonor_id = d.vdonor_id";

      Statement stmt;
       try {
            stmt = conn.createStatement();
       
            resultSet = stmt.executeQuery(selectSql);

             while (resultSet.next()) {
            
            Object[] row = new Object[5];
            row[0]=resultSet.getInt(1);
            row[1] = resultSet.getString(2);
            row[2] = resultSet.getString(3);
            row[3] = resultSet.getString(4);
            row[4] = resultSet.getString(5);
           
            
            model.addRow(row);
             }
             
            
             conn.close();
             
       }
       catch (SQLException ex) {
            Logger.getLogger(PCStockk.class.getName()).log(Level.SEVERE, null, ex);
        }
                }

                

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblDonor_id = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStock = new javax.swing.JTable();
        comboDonor = new javax.swing.JComboBox<>();
        lbSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        valQty = new javax.swing.JLabel();
        valBlood = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblDonor_id1 = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        comboxqty = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setText("STOCK");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(140, 10, 150, 50);

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(550, 30, 100, 31);

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(190, 240, 100, 31);

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(370, 240, 100, 31);

        lblDonor_id.setText("Date of Donation");
        getContentPane().add(lblDonor_id);
        lblDonor_id.setBounds(140, 460, 160, 40);

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(280, 560, 87, 31);

        tblStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Stock ID", "Donor ID", "Blood Group", "Quantity Available ", "Date of Donation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStockMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStock);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 120, 810, 92);

        comboDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDonorActionPerformed(evt);
            }
        });
        getContentPane().add(comboDonor);
        comboDonor.setBounds(390, 400, 77, 31);

        lbSearch.setFont(new java.awt.Font("American Typewriter", 1, 14)); // NOI18N
        lbSearch.setText("SEARCH");
        getContentPane().add(lbSearch);
        lbSearch.setBounds(130, 70, 90, 30);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(290, 70, 230, 30);

        valQty.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valQty);
        valQty.setBounds(460, 480, 160, 20);

        valBlood.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valBlood);
        valBlood.setBounds(460, 420, 160, 20);

        jLabel7.setText("Quantity Donated");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(160, 330, 160, 40);

        lblDonor_id1.setText("Donor ID");
        getContentPane().add(lblDonor_id1);
        lblDonor_id1.setBounds(160, 400, 160, 40);
        getContentPane().add(jDateChooser);
        jDateChooser.setBounds(390, 460, 126, 31);

        comboxqty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        getContentPane().add(comboxqty);
        comboxqty.setBounds(390, 340, 72, 31);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.hide();
        PCWorkArea frame = new PCWorkArea();
        frame.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       
        
       DefaultTableModel tblModel = (DefaultTableModel) tblStock.getModel();

        // set data to textfield when raw is selected

        String id = tblModel.getValueAt(tblStock.getSelectedRow(),0).toString();
        int stock_id = Integer.valueOf(id); 
        
        String strdonor_id = (String) comboDonor.getSelectedItem();
       int vdonor_id = Integer.valueOf(strdonor_id);
       
       String strqty = (String) comboxqty.getSelectedItem();
       int qty = Integer.valueOf(strqty);
       
       SimpleDateFormat dateFormat = new SimpleDateFormat("DD-MM-YYYY");
       String don_date = dateFormat.format(jDateChooser.getDate()); 
       
        Connection conn = dbconn.getConnection();
        
       String updateStock = "update all_stock set vdonor_id =?, quantity=?, date_donation=? where stock_id=?";

        PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(updateStock);
       
             
            stmt.setInt(1,vdonor_id); 
            stmt.setInt(2,qty);
            stmt.setString(3,don_date);
            stmt.setInt(4,stock_id);
           
            
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(PCStockk.class.getName()).log(Level.SEVERE, null, ex);
        }

          
           
       
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Connection conn = dbconn.getConnection();
         int SelectedRowIndex=tblStock.getSelectedRow();
        if(SelectedRowIndex<0)
        {
         JOptionPane.showMessageDialog(this, "Please select a row to delete");
            
        return;
        }
        DefaultTableModel model =(DefaultTableModel) tblStock.getModel();
         int stock_id=(int) model.getValueAt(SelectedRowIndex, 0);
       
         conn = dbconn.getConnection();
          String selectSql = "Delete from stock where stock_id=?";
     PreparedStatement stmt;
      try {
             
             stmt=conn.prepareStatement(selectSql);
             
                 stmt.setInt(1, stock_id);
                                   
              stmt.executeUpdate();
          conn.close();
          } catch (SQLException ex) {
              Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
          }
    
         
        JOptionPane.showMessageDialog(this, "Stock Details Deleted");
        populateTable();
 
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        int stock_id = rand.nextInt(1,10000); 
       
       String strdonor_id = (String) comboDonor.getSelectedItem();
       int vdonor_id = Integer.valueOf(strdonor_id);
       
       String strqty = (String) comboxqty.getSelectedItem();
       int qty = Integer.valueOf(strqty);
       
       SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-YYYY");
       String don_date = dateFormat.format(jDateChooser.getDate()); 
       
       System.out.println(don_date); 
       
        Connection conn = dbconn.getConnection();
        
        
        String addStock = "insert into all_stock(stock_id,pc_id, vdonor_id, quantity, date_donation) values (?,?,?,?,?) ";

        PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(addStock);
       
             
            stmt.setInt(1,stock_id); 
            stmt.setInt(2,thispc_id); 
            stmt.setInt(3,vdonor_id);
            stmt.setInt(4,qty);
            stmt.setString(5,don_date); 
           
            
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
        }

           JOptionPane.showMessageDialog(this,"Stock Details Added");

       populateTable(); 
   
  //stop
  setTextNull();
  setValidationNull();
               
        

    }//GEN-LAST:event_btnAddActionPerformed

    private void tblStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStockMouseClicked
        // TODO add your handling code here:
        //String stock_id = tblStock.getValueAt(tblStock.getSelectedRow(),0).toString();
        String blood_group = tblStock.getValueAt(tblStock.getSelectedRow(),1).toString();
        String qty = tblStock.getValueAt(tblStock.getSelectedRow(),2).toString();
        
        int stock_id = Integer.valueOf(tblStock.getValueAt(tblStock.getSelectedRow(),0).toString());
        comboxqty.setSelectedItem(stock_id);
        
        //(stock_id);
        

//        txtStock.setText(String.valueOf(stock_id));
//        comboDonor.setSelectedItem(blood_group);
//        txtQty1.setText(qty);
//        
        
            setValidationNull();
        

    }//GEN-LAST:event_tblStockMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblStock.getModel();

        model.setRowCount(0);
        for (Object rows : originalTableModel) {
            Vector rowVector = (Vector) rows;
            for (Object column : rowVector) {
                if (column.toString().toLowerCase().contains(txtSearch.getText())) {
                    //content found so adding to table
                    model.addRow(rowVector);
                    break;
                }
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void comboDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDonorActionPerformed
        // TODO add your handling code here:
         Object blood_group = comboDonor.getSelectedItem();
        

        if (blood_group == null || blood_group.toString().equals("")) {
            valQty.setText("Please Select Blood Group");
            comboDonor.removeAllItems();
            valQty.setText(null);
        } else {
            comboDonor.setSelectedItem("");
        }
    }//GEN-LAST:event_comboDonorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PCStockk().setVisible(true);
            }
        });
    }
    
     private void setTextNull() {
        
        
        comboDonor.setSelectedItem(null);
        comboxqty.setSelectedItem(null);
        
        jDateChooser.setDate(null);
        
        
        
    }
    
    private void setValidationNull() {
        
        valBlood.setText(null);
        valQty.setText(null);
        
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboDonor;
    private javax.swing.JComboBox<String> comboxqty;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lblDonor_id;
    private javax.swing.JLabel lblDonor_id1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStock;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel valBlood;
    private javax.swing.JLabel valQty;
    // End of variables declaration//GEN-END:variables

    private void updateComboxDonor() {
        Connection conn = dbconn.getConnection();
        
        String SELECTSQL2 = "SELECT VDONOR_ID FROM vdonor";

        PreparedStatement stmt2; 
        try
        {
            
            stmt2 = conn.prepareStatement(SELECTSQL2);
            
            resultSetx = stmt2.executeQuery(); 
            
            
            
            while(resultSetx.next())
            {
                comboDonor.addItem(resultSetx.getString(1));
            }
       
             
            
        }
        catch (SQLException ex)
        {
            Logger.getLogger(PCStockk.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
}
