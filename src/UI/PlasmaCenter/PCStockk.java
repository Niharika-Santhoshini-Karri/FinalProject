/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.PlasmaCenter;

import DBUTIL.DBUTIL;
import MODEL.Validations;
import UI.Admin.AdminHospital;
import UI.LoginScreen;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rishikagurram
 */

public class PCStockk extends javax.swing.JFrame {

    /**
     * Creates new form PCStock
     */
    ResultSet resultSet, resultSetx = null;
    DBUTIL dbconn= new DBUTIL();
    Vector originalTableModel;
    Validations validations;
    public PCStockk() {
        initComponents();
        populateTable();
        updateComboxDonor(); 
   originalTableModel = (Vector) ((DefaultTableModel) tblStock.getModel()).getDataVector().clone();
    validations = new Validations();
    }
    
    private void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel) tblStock.getModel();
         Connection conn = dbconn.getConnection();
        model.setRowCount(0);
        
         
                  String selectSql = "SELECT stock_id,blood_group,qty from stock";

      Statement stmt;
       try {
            stmt = conn.createStatement();
       
            resultSet = stmt.executeQuery(selectSql);

             while (resultSet.next()) {
            
            Object[] row = new Object[3];
            row[0]=resultSet.getInt(1);
            row[1] = resultSet.getString(2);
            row[2] = resultSet.getString(3);
           
            
            model.addRow(row);
             }
             
            
             conn.close();
             
       }
       catch (SQLException ex) {
            Logger.getLogger(PCStockk.class.getName()).log(Level.SEVERE, null, ex);
        }
                }

                

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblDonor_id = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStock = new javax.swing.JTable();
        comboDonor_ID = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        lbSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        valQty = new javax.swing.JLabel();
        valBlood = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtQty1 = new javax.swing.JTextField();
        lblDonor_id1 = new javax.swing.JLabel();
        jDateChooser1 = new org.netbeans.modules.form.InvalidComponent();
        ComboBlood1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setText("STOCK");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(140, 10, 150, 50);

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(550, 30, 100, 23);

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(190, 230, 100, 23);

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(370, 240, 100, 23);

        jLabel1.setText("Blood Group");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(190, 350, 110, 16);

        lblDonor_id.setText("Date of Donation");
        getContentPane().add(lblDonor_id);
        lblDonor_id.setBounds(160, 500, 160, 40);

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(280, 560, 87, 23);

        tblStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Stock ID", "Blood Group", "Quantity Available "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStockMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStock);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 120, 660, 92);

        comboDonor_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDonor_IDActionPerformed(evt);
            }
        });
        getContentPane().add(comboDonor_ID);
        comboDonor_ID.setBounds(390, 450, 77, 22);

        jLabel6.setText("Stock ID");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(200, 300, 90, 40);
        getContentPane().add(txtStock);
        txtStock.setBounds(380, 300, 74, 22);

        lbSearch.setFont(new java.awt.Font("American Typewriter", 1, 14)); // NOI18N
        lbSearch.setText("SEARCH");
        getContentPane().add(lbSearch);
        lbSearch.setBounds(130, 70, 90, 30);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(290, 70, 230, 30);

        valQty.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valQty);
        valQty.setBounds(460, 480, 160, 20);

        valBlood.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        getContentPane().add(valBlood);
        valBlood.setBounds(460, 420, 160, 20);

        jLabel7.setText("Quantity Available");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(160, 400, 160, 40);

        txtQty1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQty1KeyReleased(evt);
            }
        });
        getContentPane().add(txtQty1);
        txtQty1.setBounds(380, 400, 120, 22);

        lblDonor_id1.setText("Donor ID");
        getContentPane().add(lblDonor_id1);
        lblDonor_id1.setBounds(170, 450, 160, 40);
        getContentPane().add(jDateChooser1);
        jDateChooser1.setBounds(380, 490, 37, 18);

        ComboBlood1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AB+", "AB-", "O+", "O-", "A+", "A-", "B+", "B-" }));
        ComboBlood1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBlood1ActionPerformed(evt);
            }
        });
        getContentPane().add(ComboBlood1);
        ComboBlood1.setBounds(380, 350, 77, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.hide();
        PCWorkArea frame = new PCWorkArea();
        frame.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // take from text boxes
       var valid = true;
        
         if (comboDonor_ID.getSelectedItem() == null || comboDonor_ID.getSelectedItem().toString().isEmpty()) {
            valBlood.setText("Please Select Blood Group");
            valid = false;
        }
        
        if (!this.validations.ValidateName(txtQty.getText()) ) {
            valQty.setText("Quantity is Invalid");
            valid = false;
        }
        
        int stock_id = Integer.valueOf(txtStock.getText());
       String blood_group = (String) comboDonor_ID.getSelectedItem();
       Integer qty = Integer.valueOf(txtQty.getText());
       
       //DBUTIL dbconn= new DBUTIL();
        Connection conn = dbconn.getConnection();
        //do validation here.
        //check if the id already exists
                String addStock = "update stock set blood_group=? ,qty=? where stock_id=? ";

        PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(addStock);
       
             
            stmt.setInt(1,stock_id); 
            stmt.setString(2,blood_group);
            stmt.setInt(3,qty);
           
            
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
        }

          
           
             DefaultTableModel tblModel = (DefaultTableModel) tblStock.getModel();
              
       tblModel.setValueAt(stock_id,tblStock.getSelectedRow(), 0);
       tblModel.setValueAt(blood_group,tblStock.getSelectedRow(), 1);
       tblModel.setValueAt(qty,tblStock.getSelectedRow(), 2);
 JOptionPane.showMessageDialog(this,"Stock Details Updated");
        
   
  //stop
  txtStock.setText("");
  comboDonor_ID.setSelectedItem("");
  txtQty.setText("");
  
   setTextNull();
            setValidationNull();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Connection conn = dbconn.getConnection();
         int SelectedRowIndex=tblStock.getSelectedRow();
        if(SelectedRowIndex<0)
        {
         JOptionPane.showMessageDialog(this, "Please select a row to delete");
            
        return;
        }
        DefaultTableModel model =(DefaultTableModel) tblStock.getModel();
         int stock_id=(int) model.getValueAt(SelectedRowIndex, 0);
       
         conn = dbconn.getConnection();
          String selectSql = "Delete from stock where stock_id=?";
     PreparedStatement stmt;
      try {
             
             stmt=conn.prepareStatement(selectSql);
             
                 stmt.setInt(1, stock_id);
                                   
              stmt.executeUpdate();
          conn.close();
          } catch (SQLException ex) {
              Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
          }
    
         
        JOptionPane.showMessageDialog(this, "Stock Details Deleted");
        populateTable();
 
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       var valid = true;
        
         if (comboDonor_ID.getSelectedItem() == null || comboDonor_ID.getSelectedItem().toString().isEmpty()) {
            valBlood.setText("Please Select Blood Group");
            valid = false;
        }
        
        if (!this.validations.ValidateName(txtQty.getText()) ) {
            valQty.setText("Quantity is Invalid");
            valid = false;
        }
        
        int stock_id = Integer.valueOf(txtStock.getText());
       String blood_group = (String) comboDonor_ID.getSelectedItem();
       Integer qty = Integer.valueOf(txtQty.getText());
       
       //DBUTIL dbconn= new DBUTIL();
        Connection conn = dbconn.getConnection();
        //do validation here.
        //check if the id already exists
                String addStock = "insert into stock(stock_id,blood_group,qty) values (?,?,?) ";

        PreparedStatement stmt; 
        try
        {
            stmt = conn.prepareStatement(addStock);
       
             
            stmt.setInt(1,stock_id); 
            stmt.setString(2,blood_group);
            stmt.setInt(3,qty);
           
            
            stmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminHospital.class.getName()).log(Level.SEVERE, null, ex);
        }

           JOptionPane.showMessageDialog(this,"Stock Details Added");

       populateTable(); 
   
  //stop
  setTextNull();
  setValidationNull();
               
        

    }//GEN-LAST:event_btnAddActionPerformed

    private void tblStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStockMouseClicked
        // TODO add your handling code here:
        String stock_id = tblStock.getValueAt(tblStock.getSelectedRow(),0).toString();
        String blood_group = tblStock.getValueAt(tblStock.getSelectedRow(),1).toString();
        String qty = tblStock.getValueAt(tblStock.getSelectedRow(),2).toString();
        
        
      
        

        txtStock.setText(String.valueOf(stock_id));
        comboDonor_ID.setSelectedItem(blood_group);
        txtQty.setText(qty);
        
        
            setValidationNull();
        

    }//GEN-LAST:event_tblStockMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblStock.getModel();

        model.setRowCount(0);
        for (Object rows : originalTableModel) {
            Vector rowVector = (Vector) rows;
            for (Object column : rowVector) {
                if (column.toString().toLowerCase().contains(txtSearch.getText())) {
                    //content found so adding to table
                    model.addRow(rowVector);
                    break;
                }
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void comboDonor_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDonor_IDActionPerformed
        // TODO add your handling code here:
         Object blood_group = comboDonor_ID.getSelectedItem();
        

        if (blood_group == null || blood_group.toString().equals("")) {
            valQty.setText("Please Select Blood Group");
            comboDonor_ID.removeAllItems();
            valQty.setText(null);
        } else {
            comboDonor_ID.setSelectedItem("");
        }
    }//GEN-LAST:event_comboDonor_IDActionPerformed

    private void txtQty1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQty1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQty1KeyReleased

    private void ComboBlood1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBlood1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBlood1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PCStockk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PCStockk().setVisible(true);
            }
        });
    }
    
     private void setTextNull() {
        
        
        comboDonor_ID.setSelectedItem(null);
        txtQty.setText(null);
        
        
    }
    
    private void setValidationNull() {
        
        valBlood.setText(null);
        valQty.setText(null);
        
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBlood1;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboDonor_ID;
    private org.netbeans.modules.form.InvalidComponent jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lblDonor_id;
    private javax.swing.JLabel lblDonor_id1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStock;
    private javax.swing.JTextField txtQty1;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStock;
    private javax.swing.JLabel valBlood;
    private javax.swing.JLabel valQty;
    // End of variables declaration//GEN-END:variables

    private void updateComboxDonor() {
        Connection conn = dbconn.getConnection();
        
        String SELECTSQL2 = "SELECT VDONOR_ID FROM vdonor";

        PreparedStatement stmt2; 
        try
        {
            
            stmt2 = conn.prepareStatement(SELECTSQL2);
            
            resultSetx = stmt2.executeQuery(); 
            
            
            
            while(resultSetx.next())
            {
                ComboPlasmaCenter.addItem(resultSet2.getString(1));
            }
       
             
            
        }
        catch (SQLException ex)
        {
            Logger.getLogger(PCStockk.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
}
